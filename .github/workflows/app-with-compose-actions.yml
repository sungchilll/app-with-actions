name: App With Github Actions with docker-compose CI/CD

on:
  push

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Make application-prod.properties
      run: |
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.PROPERTIES }}" > ./application.properties
      shell: bash
      
    - name: Build with Maven
      run: mvn -B -DskipTests package --file pom.xml
      
    - name: Naming jar file
      run: mv ./target/*.jar ./target/app.jar

    - name: Check jar file
      run: ls ./target

    - uses: actions/upload-artifact@v4
      with:
        name: app
        path: ./target/*.jar

    - name: Upload docker-compose.yml artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose.yml
        path: ./docker-compose.yml

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/app-with-actions:latest
  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
    - name: Download docker-compose.yml
      uses: actions/download-artifact@v4
      with:
        name: docker-compose.yml
        path: ./

    - name: Verify docker-compose.yml in Repository
      run: ls -l ./docker-compose.yml

    - name: Upload docker-compose.yml to EC2
      uses: appleboy/scp-action@v0.1.7
      with: 
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: ./docker-compose.yml
        target: /home/${{ secrets.EC2_USERNAME }}/

    - name: Execute Deployment Script on EC2
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
            export EC2_USERNAME=${{ secrets.EC2_USERNAME }}
            export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            echo "DB_USERNAME = "${DB_USERNAME}
            echo "DB_PASSWORD = "${DB_PASSWORD}

            sudo cat <<EOF > /home/${{ secrets.EC2_USERNAME }}/.env
            EC2_USERNAME=${{ secrets.EC2_USERNAME }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            EOF
            echo "Environment variables set."
            
            sudo cat <<EOF > /home/${{ secrets.EC2_USERNAME }}/init.sql
            USE mysql;

            -- 기존 사용자 삭제
            DROP USER IF EXISTS '${DB_USERNAME}'@'%';

            -- 사용자 생성
            CREATE USER '${DB_USERNAME}'@'%' IDENTIFIED WITH caching_sha2_password BY '${DB_PASSWORD}';
            FLUSH PRIVILEGES;

            -- 데이터베이스 생성
            CREATE DATABASE IF NOT EXISTS app;
            GRANT ALL PRIVILEGES ON app.* TO '${DB_USERNAME}'@'%';
            FLUSH PRIVILEGES;

            -- 데이터베이스 사용
            USE app;

            -- 테이블 생성
            CREATE TABLE IF NOT EXISTS \`Student\` (
              \`id\` BIGINT NOT NULL AUTO_INCREMENT,
              \`name\` VARCHAR(255) NOT NULL,
              PRIMARY KEY (\`id\`)
            ) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

            EOF

            # JDK 설치 확인
            if ! java -version 2>&1 | grep -q "17"; then
              sudo apt update
              sudo apt install -y openjdk-17-jdk
              echo 'JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"' | sudo tee -a /etc/environment
              source /etc/environment
              echo "JDK 17 installed and JAVA_HOME set."
            fi

            # Docker 설치 확인
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Docker Compose 설치 확인
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # docker-compose.yml 확인 및 실행
            cd /home/${EC2_USERNAME}
            if [[ -f "docker-compose.yml" ]]; then
              sudo docker-compose --env-file .env down
              sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app-with-actions
              sudo docker-compose --env-file .env up -d
              sudo docker image prune -a -f
              echo "Deployment completed."
            else
              echo "Error: docker-compose.yml not found in /home/${EC2_USERNAME}!"
              exit 1
            fi
