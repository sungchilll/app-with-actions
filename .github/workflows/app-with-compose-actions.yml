name: App With Github Actions with docker-compose CI/CD

on:
  push

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Make application-prod.properties
      run: |
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.PROPERTIES }}" > ./application.properties
      shell: bash
      
    - name: Build with Maven
      run: mvn -B -DskipTests package --file pom.xml
      
    - name: Naming jar file
      run: mv ./target/*.jar ./target/app.jar

    - name: Check jar file
      run: ls ./target

    - uses: actions/upload-artifact@v4
      with:
        name: app
        path: ./target/*.jar

    - name: Upload docker-compose.yml artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose.yml
        path: ./docker-compose.yml

    - name: Upload Dockerfile artifact
      uses: actions/upload-artifact@v4
      with:
        name: Dockerfile
        path: ./Dockerfile

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/app-with-actions:latest
  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: app

      - name: Download docker-compose.yml
        uses: actions/download-artifact@v4
        with:
          name: docker-compose.yml
          path: ./docker-compose.yml
      
      - name: Download Dockerfile
        uses: actions/download-artifact@v4
        with:
          name: Dockerfile
          path: ./Dockerfile
      
      - name: From Github Actions to AWS EC2 through SCP
        uses: appleboy/scp-action@v0.1.7
        with: 
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: Dockerfile

      - name: From Github Actions to AWS EC2 through SCP
        uses: appleboy/scp-action@v0.1.7
        with: 
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: docker-compose.yml

      - name: Execute deployment script
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
              export DB_USERNAME="${{ secrets.DB_USERNAME }}"
              export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
              export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
              export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
              echo "DB_USERNAME=$DB_USERNAME"
              echo "DB_PASSWORD=$DB_PASSWORD"
              echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
              echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME"
              echo "DOCKERHUB_USERNAME{}=${DOCKERHUB_USERNAME}"

              if [[ -z "$DB_USERNAME" || -z "$DB_PASSWORD" || -z "${MYSQL_ROOT_PASSWORD}" ]]; then
                echo "One or more environment variables are missing!"
                exit 1
              fi

              if ! java -version 2>&1 | grep -q "17"; then
                sudo apt update
                sudo apt install -y openjdk-17-jdk
                echo "JDK 17 installed."
                echo 'JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"' | sudo tee -a /etc/environment
                source /etc/environment
                echo $JAVA_HOME
              fi
              if ! command -v docker &> /dev/null; then
                echo "Installing Docker..."
                sudo apt install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
              fi
              if ! command -v docker-compose &> /dev/null; then
                echo "Installing Docker Compose..."
                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi

              ll
              if [[ -f "docker-compose.yml" ]]; then
                sudo docker-compose down
                sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app-with-actions
                sudo docker-compose up -d
                sudo docker image prune -a -f
              else
                echo "Error: docker-compose.yml not found!"
                exit 1
              fi
