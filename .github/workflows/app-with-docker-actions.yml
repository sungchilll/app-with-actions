name: App With Github Actions with Docker CI/CD

on: push

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      # Generate application.properties
      - name: Generate application.properties
        run: |
          echo "spring.datasource.url=jdbc:mysql://mysql:3306/action" > src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties

      # Build with Maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Rename JAR file
      - name: Naming jar file
        run: mv ./target/*.jar ./target/app.jar

      # Check jar file
      - name: Check jar file
        run: ls ./target

      # Upload artifact
      - uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./target/*.jar

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app-with-actions:v1.0
          platforms: linux/amd64,linux/arm64

  cd:
    needs: ci
    runs-on: ubuntu-latest

    steps:
      # Copy docker-compose.yml to EC2
      - name: Copy docker-compose.yml
        run: |
          scp docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/docker-compose.yml

      # Execute deployment script
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          env:
            DB_USERNAME: "${{ secrets.DB_USERNAME }}"
            DB_PASSWORD: "${{ secrets.DB_PASSWORD }}"
            MYSQL_ROOT_PASSWORD: "${{ secrets.MYSQL_ROOT_PASSWORD }}"
          script: |
            echo "DB_USERNAME=${DB_USERNAME}"
            echo "DB_PASSWORD=${DB_PASSWORD}"
            echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
            # Ensure environment variables are available
            if [[ -z "$DB_USERNAME" || -z "$DB_PASSWORD" || -z "$MYSQL_ROOT_PASSWORD" ]]; then
              echo "One or more environment variables are missing!"
              exit 1
            fi
            if ! java -version 2>&1 | grep -q "17"; then
              sudo apt update
              sudo apt install -y openjdk-17-jdk
              echo "JDK 17 installed."
            fi
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            sudo docker-compose -f ~/docker-compose.yml up -d
