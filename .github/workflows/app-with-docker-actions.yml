name: App With Github Actions with Docker CI/CD

on:
  workflow_dispatch

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      # Generate application.properties
      - name: Generate application.properties
        run: |
          mkdir -p src/main/resources
          echo "spring.application.name=app-with-actions" >> src/main/resources/application.properties
          echo "spring.datasource.url=jdbc:mysql://localhost:3306/action?serverTimezone=Asia/Seoul" > src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
          echo "spring.jpa.generate-ddl=true" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=create" >> src/main/resources/application.properties
          echo "spring.jpa.properties.hibernate.format_sql=true" >> src/main/resources/application.properties
          echo "spring.jpa.show-sql=true" >> src/main/resources/application.properties

      # Build with Maven (Skip Tests)
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      # Rename JAR file
      - name: Rename jar file
        run: mv ./target/*.jar ./target/app.jar

      # Upload artifact (JAR file)
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app.jar
          path: ./target/app.jar

      # Upload docker-compose.yml
      - name: Upload docker-compose.yml artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose.yml
          path: ./docker-compose.yml

  cd:
    needs: ci
    runs-on: ubuntu-latest

    steps:
      # Download JAR and docker-compose.yml artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: app.jar
          path: ./app.jar

      - name: Download docker-compose.yml
        uses: actions/download-artifact@v4
        with:
          name: docker-compose.yml
          path: ./docker-compose.yml

      # Execute deployment script
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Export Secrets as variables
            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"

            # Debugging: Print variables (Optional, remove in production)
            echo "DB_USERNAME=$DB_USERNAME"
            echo "DB_PASSWORD=$DB_PASSWORD"
            echo "MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD"

            # Ensure variables are not empty
            if [[ -z "$DB_USERNAME" || -z "$DB_PASSWORD" || -z "$MYSQL_ROOT_PASSWORD" ]]; then
              echo "One or more environment variables are missing!"
              exit 1
            fi

            # Install required software
            if ! java -version 2>&1 | grep -q "17"; then
              sudo apt update
              sudo apt install -y openjdk-17-jdk
              echo "JDK 17 installed."
            fi
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Transfer downloaded files to EC2
            scp -o StrictHostKeyChecking=no app.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app.jar
            scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/docker-compose.yml

            # Create environment file for docker-compose
            ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Creating environment file..."
            echo "DB_USERNAME=$DB_USERNAME" > ~/env.list
            echo "DB_PASSWORD=$DB_PASSWORD" >> ~/env.list
            echo "MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD" >> ~/env.list

            # Deploy using docker-compose
            echo "Running docker-compose..."
            sudo docker-compose --env-file ~/env.list -f ~/docker-compose.yml up -d
            EOF
